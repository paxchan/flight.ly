<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mindtrip Replica</title>
    <link rel="stylesheet" href="styles.css"> 
</head>
<body>

    <!-- Sidebar -->
    <div class="sidebar">
        <div class="flex-container">
            <div class="menu-item"><span>Instructions</span></div>
            <div class="menu-item"><span>Chats</span></div>
            <div class="menu-item"><span>Checkout</span></div>
        </div>
        <div class="traveler"><span>Traveler</span></div>
        <div class="footer">
            Company Contact Help<br>
            Terms Privacy<br>
            © 2025 Flight.ly, Inc.
        </div>
    </div>

    <!-- Map Container -->
    <div class="map-container">
        <h2>flight.ly</h2>
        <form id="flight-search-form">
            <input list="departure-city-options" id="departure-city" name="departure-city" placeholder="Departure City" required>
            <datalist id="departure-city-options">
                <% cities.forEach(city => { %>
                    <option value="<%= city %>">
                <% }); %>
            </datalist>
    
            <input list="arrival-city-options" id="arrival-city" name="arrival-city" placeholder="Arrival City" required>
            <datalist id="arrival-city-options">
                <% cities.forEach(city => { %>
                    <option value="<%= city %>">
                <% }); %>
            </datalist>
    
            <input type="date" id="departure-date" name="departure-date" required>
    
            <button type="submit" id="search-flights-button" class="btn-31">
                <span class="text-container">
                    <span class="text">Search Flights</span>
                </span>
            </button>
        </form>

        <div id="flight-results" class="flight-card-container">
            <!-- Flight results will be populated dynamically -->
        </div>

        <div id="map">Map Placeholder</div>
    </div>

    <!-- Booking Modal (Improved) -->
    <div id="booking-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeBookingModal()">&times;</span>
            <h2>Confirm Your Flight</h2>
            
            <div class="modal-container">
                <!-- Left: Flight Details -->
                <div class="modal-left">
                    <p><strong>Airline:</strong> <span id="modal-airline"></span></p>
                    <p><strong>Departure Airport:</strong> <span id="modal-departure-airport"></span></p>
                    <p><strong>Arrival Airport:</strong> <span id="modal-arrival-airport"></span></p>
                    <p><strong>Departure & Arrival:</strong> <span id="modal-departure"></span></p>
                    <p id="modal-duration"></p>
                    <p><strong>Cost:</strong> <span id="modal-cost"></span></p>
                </div>
    
                <!-- Right: Layover Info + Booking -->
                <div class="modal-right">
                    <div id="modal-layovers"></div>
                    <button id="confirm-booking" class="btn-31">Book Now</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <h1>New chat</h1>
        <h2>Where to today?</h2>
        <p>Hey there, where would you like to go? I'm here to assist you with booking your flight.</p>
        <div class="ai-tool">
            <input type="text" placeholder="Ask anything...">
            <hr>
        </div>
    </div>

    <script>
        function formatDateTime(departureDatetime, arrivalDatetime = null, fullFormat = false) {
            // Ensure the datetime values are valid
            if (!departureDatetime || isNaN(new Date(departureDatetime).getTime())) return "Invalid Date";
            if (arrivalDatetime && isNaN(new Date(arrivalDatetime).getTime())) return "Invalid Date";

            const departure = new Date(departureDatetime);
            const arrival = arrivalDatetime ? new Date(arrivalDatetime) : null;

            if (fullFormat) {
                // ✅ Full Date + Time (Used in Modal)
                return arrival
                    ? `<strong>${departure.toLocaleString([], { dateStyle: 'medium', timeStyle: 'short' })}</strong> 
                    → 
                    <strong>${arrival.toLocaleString([], { dateStyle: 'medium', timeStyle: 'short' })}</strong>`
                    : `<strong>${departure.toLocaleString([], { dateStyle: 'medium', timeStyle: 'short' })}</strong>`;
            } else {
                // ✅ Time Only (Used in Search Results)
                const formattedDeparture = departure.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                let formattedArrival = arrival ? arrival.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : "";

                if (arrival) {
                    const dayDifference = arrival.getDate() - departure.getDate();
                    if (dayDifference > 0) {
                        formattedArrival += `<sup>+${dayDifference}</sup>`;
                    }
                }

                return arrival ? `${formattedDeparture} → ${formattedArrival}` : formattedDeparture;
            }
        }


        function formatDuration(duration) {
            const [hours, minutes] = duration.split(':').map(Number);
            return `${hours} hr ${minutes} min`;
        }

        function displayFlightResults(flights) {
            const flightResultsContainer = document.getElementById('flight-results');
            flightResultsContainer.innerHTML = '';

            if (flights.length === 0) {
                flightResultsContainer.innerHTML = '<p>No flights found for the selected criteria.</p>';
                return;
            }

            flights.forEach(flight => {
                const card = document.createElement('div');
                card.className = 'flight-card';

                card.innerHTML = `
                    <div class="flight-info">
                        <div class="flight-header">
                            <span>${formatDateTime(flight.departureDatetime, flight.arrivalDatetime)}</span>
                            <span class="cost">$${flight.cost}</span>
                            <button class="book-button" onclick='openBookingModal(${JSON.stringify(flight)})'>Book</button>
                        </div>
                        <div class="flight-airline">
                            <span>${formatDuration(flight.totalFlightDuration)}</span>
                            <span class="airline">${flight.airline}</span>
                            <span>${flight.layoverCount === 0 ? "Non-Stop" : flight.layoverCount === 1 ? "1 stop" : `${flight.layoverCount} stops`}</span>
                        </div>
                    </div>
                `;

                flightResultsContainer.appendChild(card);
            });
        }

        function openBookingModal(flight) {
            document.getElementById("modal-airline").textContent = flight.airline;
            document.getElementById("modal-departure-airport").textContent = flight.departureCity;
            document.getElementById("modal-arrival-airport").textContent = flight.arrivalCity;
            document.getElementById("modal-departure").innerHTML = formatDateTime(flight.departureDatetime, flight.arrivalDatetime, true);
            document.getElementById("modal-cost").textContent = `$${flight.cost}`;

            const durationContainer = document.getElementById("modal-duration");
            
            if (flight.layovers.length > 0) {
                // Show Total Travel Duration when layovers exist
                durationContainer.innerHTML = `
                    <strong>First Flight Duration:</strong> ${formatDuration(flight.flightDuration)}<br><br>
                    <strong>Total Travel Duration:</strong> ${formatDuration(flight.totalFlightDuration)}
                `;
            } else {
                // Show Flight Duration when it's a direct flight
                durationContainer.innerHTML = `<strong>Flight Duration:</strong> ${formatDuration(flight.flightDuration)}`;
            }

            // Handle Layovers
            const layoversContainer = document.getElementById("modal-layovers");
            layoversContainer.innerHTML = ""; // Clear previous data

            if (flight.layovers && flight.layovers.length > 0) {
                flight.layovers.forEach((layover, index) => {
                    layoversContainer.innerHTML += `
                        <div class="layover">
                            <strong>Layover ${index + 1}:</strong> ${layover.city}<br>
                            <strong>Layover Duration:</strong> ${formatDuration(layover.duration)}<br>
                            <strong>Departure:</strong> ${formatDateTime(layover.departureDatetime, null, true)}<br>
                            <strong>Flight Duration:</strong> ${formatDuration(layover.flightDuration)}
                            <hr>
                        </div>
                    `;
                });
            }

            document.getElementById("booking-modal").style.display = "block";
        }


        function closeBookingModal() {
            document.getElementById('booking-modal').style.display = "none";
        }

        document.getElementById('flight-search-form').addEventListener('submit', async (event) => {
            event.preventDefault();
            const departureDate = document.getElementById('departure-date').value;
            const departureCity = document.getElementById('departure-city').value;
            const arrivalCity = document.getElementById('arrival-city').value;

            if (departureDate && departureCity && arrivalCity) {
                try {
                    const response = await fetch('/api/flights', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ departureDate, departureCity, arrivalCity }),
                    });

                    if (!response.ok) throw new Error('Failed to fetch flights');

                    const flights = await response.json();
                    displayFlightResults(flights);
                } catch (error) {
                    console.error('Error fetching flights:', error);
                }
            } else {
                alert('Please fill in all the required fields.');
            }
        });
    </script>
</body>
</html>
